require('dotenv').config({ path: '.env' });
require('dotenv').config({ path: '.env.local' });
const mongoose = require('mongoose');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ö–µ–º –º–æ–¥–µ–ª–µ–π
const BlogSchema = new mongoose.Schema({
  removed: {
    type: Boolean,
    default: false,
  },
  enabled: {
    type: Boolean,
    default: true,
  },
  title: {
    type: String,
    required: true,
  },
  slug: {
    type: String,
    required: true,
  },
  content: {
    type: String,
    required: true,
  },
  shortContent: {
    type: String
  },
  bannerImage: {
    type: String,
  },
  type: {
    type: String,
  },
  createdBy: {
    type: mongoose.Schema.ObjectId
  },
  updatedBy: {
    type: mongoose.Schema.ObjectId
  },
}, {
  timestamps: { createdAt: 'created', updatedAt: 'updated' },
});

const ContactusSchema = new mongoose.Schema({
  removed: {
    type: Boolean,
    default: false,
  },
  enabled: {
    type: Boolean,
    default: true,
  },
  isRead: {
    type: Boolean,
    default: false,
  },
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
  },
  message: String,
}, {
  timestamps: { createdAt: 'created', updatedAt: 'updated' },
});

const FaqSchema = new mongoose.Schema({
  removed: {
    type: Boolean,
    default: false,
  },
  enabled: {
    type: Boolean,
    default: true,
  },
  question: {
    type: String,
    required: true,
  },
  answer: {
    type: String,
    required: true,
  },
  createdBy: {
    type: mongoose.Schema.ObjectId
  },
  updatedBy: {
    type: mongoose.Schema.ObjectId
  }
}, {
  timestamps: { createdAt: 'created', updatedAt: 'updated' },
});

const PageContentSchema = new mongoose.Schema({
  removed: {
    type: Boolean,
    default: false,
  },
  enabled: {
    type: Boolean,
    default: true,
  },
  title: {
    type: String,
    required: true,
  },
  page: {
    type: String,
    required: true,
  },
  content: {
    type: String,
    required: true,
  },
  shortContent: {
    type: String
  },
  bannerImage: {
    type: String,
  },
  createdBy: {
    type: mongoose.Schema.ObjectId
  },
  updatedBy: {
    type: mongoose.Schema.ObjectId
  },
}, {
  timestamps: { createdAt: 'created', updatedAt: 'updated' },
});

async function migrateData() {
  try {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö...');

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ä–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    const oldConnection = mongoose.createConnection(process.env.OLD_DATABASE);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å—Ç–∞—Ä–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–æ–≤–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    const newConnection = mongoose.createConnection(process.env.DATABASE);
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –Ω–æ–≤–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ä–æ—ó –ë–î
    const OldBlog = oldConnection.model('Blog', BlogSchema);
    const OldContactus = oldConnection.model('Contactus', ContactusSchema);
    const OldFaq = oldConnection.model('Faq', FaqSchema);
    const OldPageContent = oldConnection.model('PageContent', PageContentSchema);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ—ó –ë–î
    const NewBlog = newConnection.model('Blog', BlogSchema);
    const NewContactus = newConnection.model('Contactus', ContactusSchema);
    const NewFaq = newConnection.model('Faq', FaqSchema);
    const NewPageContent = newConnection.model('PageContent', PageContentSchema);

    // –ú—ñ–≥—Ä–∞—Ü—ñ—è Blogs
    console.log('üìù –ú—ñ–≥—Ä–∞—Ü—ñ—è –±–ª–æ–≥—ñ–≤...');
    const blogs = await OldBlog.find({});
    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${blogs.length} –±–ª–æ–≥—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`);
    
    for (const blog of blogs) {
      const existingBlog = await NewBlog.findOne({ _id: blog._id });
      if (!existingBlog) {
        await NewBlog.create(blog.toObject());
        console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –±–ª–æ–≥: ${blog.title}`);
      } else {
        console.log(`‚ö†Ô∏è –ë–ª–æ–≥ –≤–∂–µ —ñ—Å–Ω—É—î: ${blog.title}`);
      }
    }

    // –ú—ñ–≥—Ä–∞—Ü—ñ—è Contact Us
    console.log('üìß –ú—ñ–≥—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö —Ñ–æ—Ä–º...');
    const contacts = await OldContactus.find({});
    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö —Ñ–æ—Ä–º –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`);
    
    for (const contact of contacts) {
      const existingContact = await NewContactus.findOne({ _id: contact._id });
      if (!existingContact) {
        await NewContactus.create(contact.toObject());
        console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç: ${contact.name} - ${contact.email}`);
      } else {
        console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î: ${contact.name} - ${contact.email}`);
      }
    }

    // –ú—ñ–≥—Ä–∞—Ü—ñ—è FAQs
    console.log('‚ùì –ú—ñ–≥—Ä–∞—Ü—ñ—è FAQ...');
    const faqs = await OldFaq.find({});
    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${faqs.length} FAQ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`);
    
    for (const faq of faqs) {
      const existingFaq = await NewFaq.findOne({ _id: faq._id });
      if (!existingFaq) {
        await NewFaq.create(faq.toObject());
        console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ FAQ: ${faq.question.substring(0, 50)}...`);
      } else {
        console.log(`‚ö†Ô∏è FAQ –≤–∂–µ —ñ—Å–Ω—É—î: ${faq.question.substring(0, 50)}...`);
      }
    }

    // –ú—ñ–≥—Ä–∞—Ü—ñ—è Page Contents
    console.log('üìÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫...');
    const pageContents = await OldPageContent.find({});
    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${pageContents.length} –∫–æ–Ω—Ç–µ–Ω—Ç—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`);
    
    for (const pageContent of pageContents) {
      const existingPageContent = await NewPageContent.findOne({ _id: pageContent._id });
      if (!existingPageContent) {
        await NewPageContent.create(pageContent.toObject());
        console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${pageContent.title} (${pageContent.page})`);
      } else {
        console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∂–µ —ñ—Å–Ω—É—î: ${pageContent.title} (${pageContent.page})`);
      }
    }

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const newBlogCount = await NewBlog.countDocuments({});
    const newContactCount = await NewContactus.countDocuments({});
    const newFaqCount = await NewFaq.countDocuments({});
    const newPageContentCount = await NewPageContent.countDocuments({});

    console.log('\nüéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
    console.log(`   - –ë–ª–æ–≥–∏: ${newBlogCount}`);
    console.log(`   - –ö–æ–Ω—Ç–∞–∫—Ç–∏: ${newContactCount}`);
    console.log(`   - FAQ: ${newFaqCount}`);
    console.log(`   - –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–æ–∫: ${newPageContentCount}`);

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å
    await oldConnection.close();
    await newConnection.close();
    
    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–∞–º–∏ –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ');
    console.log('üèÅ –°–∫—Ä–∏–ø—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    process.exit(0);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó
migrateData(); 